devtools::load_all(".")
usethis::use_testthat()
set.seed(15)
d = 10
G = as(rsparsematrix(d, d, density = 0.2, symmetric = T), "nsparseMatrix")
library(Matrix)
set.seed(15)
d = 10
G = as(rsparsematrix(d, d, density = 0.2, symmetric = T), "nsparseMatrix")
diag(G) = F
image(G)
out = sample_prec_mat(G)
devtools::load_all(".")
out = sample_prec_mat(G)
out
out$Gam
Sig = solve(out$Gam)
eigen(Sig)
library(igraph)
read_graph("../R_code/simple_pcg","graphml")
pcg = read_graph("../R_code/simple_pcg","graphml")
usethis::use_data(pcg)
pcg
devtools::load_all(".")
pcg
devtools::load_all(".")
library(igraph)
pcg
as_adj(pcg)
sample_prec_mat(as_adj(pcg))
G
set.seed(15)
d = 10
G = as(rsparsematrix(d, d, density = 0.2, symmetric = T), "nsparseMatrix")
diag(G) = F
image(G)
G
A = as(as_daj(pcg), "nsparseMatrix")
A = as(as_adj(pcg), "nsparseMatrix")
A
sample_prec_mat(A)
devtools::load_all(".")
A = as(as_adj(pcg), "nsparseMatrix")
sample_prec_mat(A)
devtools::load_all(".")
sample_prec_mat(A)
G = A
sG = summary(G)
g = length(sG$i)
Del_values = normalize_infnorm(runif(g, min = -1, max = 1))
Del = sparseMatrix(i = sG$i, j = sG$j, x = Del_values, symmetric = T)
g
sG
Del_values
sparseMatrix(i = sG$i, j = sG$j, x = Del_values, symmetric = T)
G = as(rsparsematrix(d, d, density = 0.2, symmetric = T), "nsparseMatrix")
diag(G) = F
image(G)
summary(G)
"nsparseMatrix"
?nsparseMatrix
sample_prec_mat(A)
as_adj(pcg)
forceSymmetric(A)
summary(forceSymmetric(A))
summary(forceSymmetric(A, "U"))
summary(forceSymmetric(A, "L"))
summary(forceSymmetric(A))
sample_prec_mat(A)
sample_prec_mat(forceSymmetric(A))
sample_prec_mat(forceSymmetric(as_adj(pcg)))
sample_prec_mat(forceSymmetric(as_adj(pcg)))
pcg
?as_adj
as_adj(pcg)
isSymmetric(as_adj(pcg))
is_directed(pcg)
is_undirected(pcg)
is_directed(pcg)
devtools::load_all(".")
get_adj(pcg)
devtools::load_all(".")
get_adj(pcg)
summary(get_adj(pcg))
A = get_adj(pcg)
sample_prec_mat(A)
sample_prec_mat(A)
sample_prec_mat(A)
Gam = sample_prec_mat(A)$Gam
Gam
Sig = solve(Gam)
devtools::load_all(".")
as(c(1,0,1,1),"nMatrix")
as(c(T,F,T,T),"nMatrix")
# pcg = read_graph("../R_code/simple_pcg","graphml")
# usethis::use_data(pcg)
Sig = read("../R_code/Sigma.rda")
# pcg = read_graph("../R_code/simple_pcg","graphml")
# usethis::use_data(pcg)
Sig = load("../R_code/Sigma.rda")
# pcg = read_graph("../R_code/simple_pcg","graphml")
# usethis::use_data(pcg)
Sig = load("../R_code/Sigma.rda")
# pcg = read_graph("../R_code/simple_pcg","graphml")
# usethis::use_data(pcg)
load("../R_code/Sigma.rda")
Sig
usethis::use_data(Sigma)
usethis::use_data(Sig)
devtools::load_all(".")
# A = get_adj(pcg)
# Gam = sample_prec_mat(A)$Gam
# Sig = solve(Gam)
Sig
all_nodes = 1:nrow(Sig)
j <- 3
S_list = list(
all_nodes[-j],
c(2,6,12),
c(4,6,12,14),
c(7,10),
c(8,9,11,12,14))
for (S in S_list) {
print(computeLattice(j, S, Sig, all_nodes, should_sort=T))
cat('\n')
}
computeLattice(j, S, Sig, all_nodes, should_sort=T)
Sig
S
all_nodes
pcg = read_graph("../R_code/simple_pcg","graphml")
usethis::use_data(pcg)
usethis::use_data(pcg, overwrite = T)
load("../R_code/Sigma.rda")
usethis::use_data(Sig, overwrite = T)
pcg
plot(pcg)
pcg = read_graph("../R_code/simple_pcg","graphml")
plot(pcg)
usethis::use_data(pcg, overwrite = T)
load("../R_code/Sigma.rda")
usethis::use_data(Sig, overwrite = T)
Sig
pcg
devtools::load_all(".")
pcg
plot(pcg)
get_adj(pcg)
random_invcov(get_adj(pcg))
devtools::load_all(".")
random_invcov(get_adj(pcg))
devtools::load_all(".")
A = get_adj(pcg)
rprec1(A)
rprec2(A)
Gam = rprec2(A)
devtools::load_all(".")
# A = get_adj(pcg)
# Gam = rprec2(A)
# Sig = solve(Gam)
Sig
all_nodes = 1:nrow(Sig)
j <- 3
S_list = list(
all_nodes[-j],
c(2,6,12),
c(4,6,12,14),
c(7,10),
c(8,9,11,12,14))
for (S in S_list) {
print(computeLattice(j, S, Sig, all_nodes, should_sort=T))
cat('\n')
}
computeLattice(j, S, Sig, all_nodes, should_sort=T)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
computeLattice(j, S, Sig, all_nodes, should_sort=T)
j <- 3
S_list = list(
all_nodes[-j],
c(2,6,12),
c(4,6,12,14),
c(7,10),
c(8,9,11,12,14))
for (S in S_list) {
print(computeLattice(j, S, Sig, all_nodes, should_sort=T))
cat('\n')
}
library(usethis)
use_test("lattice")
expect_equal(c(1,2,3),c(1,2,3))
expect_equal(c(1,2,3),c(1,2,4))
S_list = list(
all_nodes[-j],
c(2,6,12),
c(4,6,12,14),
c(7,10),
c(8,9,11,12,14))
for (S in S_list) {
print(computeLattice(j, S, Sig, all_nodes, should_sort=T))
cat('\n')
}
computeLattice(j, S, Sig, all_nodes, should_sort=T)
lat = computeLattice(j, S, Sig, all_nodes, should_sort=T)
lat = computeLattice(j, S, Sig, all_nodes, should_sort=T)
S = c(2,6,12)
lat = computeLattice(j, S, Sig, all_nodes, should_sort=T)
lat$m
expect_equal(lat$m, c(2,6,12))
devtools::load_all(".")
as_set(c(1,2,3))
devtools::load_all(".")
expect_equal(lat$m, as_set(c(2,6,12)))
expect_equal(lat$m, as_set(c(2,6,12)))
lat$M
expect_equal(lat$M, as_set(c(1,2,4,5,6,7,8,9,10,11,12,13,14,15)))
S = c(8,9,11,12,14)
lat = computeLattice(j, S, Sig, all_nodes, should_sort=T)
lat
lat$m
expect_equal(lat$m, as_set(c(9,12,14)))
lat$M
expect_equal(lat$M, as_set(c(4,5,7,8,9,10,11,12,13,14,15)))
devtools::test()
devtools::test()
use_r(new_lattice)
use_r("new_lattice")
devtools::load_all(".")
lat = nblat(j, S, Sig)
lat
lat$num_elms
devtools::load_all(".")
lat = nblat(j, S, Sig)
lat$num_elms
lat
str(lat)
j <- 3
S_list = list(
all_nodes[-j],
c(2,6,12),
c(4,6,12,14),
c(7,10),
c(8,9,11,12,14))
for (S in S_list) {
print(computeLattice(j, S, Sig, all_nodes, should_sort=T))
cat('\n')
}
S = c(4,6,12,14)
lat = nblat(j, S, Sig)
lat4m
lat$m
expect_equal(lat$m, as_set(c(6,12)))
expect_equal(lat$M, as_set(c(6,12)))
expect_equal(lat$M, as_set(c(4,5,6,7,10,11,12,14,15)))
expect_equal(lat$M, as_set(c(4,5,6,7,10,11,12,14,15)))
S = c(7,10)
lat = nblat(j, S, Sig)
expect_equal(lat$m, as_set(c(6,12)))
expect_equal(lat$m, NULL)
expect_equal(lat$m, as_set(NULL))
lat$m
str(lat$m)
set = c(1,2)
set[-1]
set = set[-1]
set = set[-1]
set
numeric(0)
empty_set = function() {
as_set(numeric(0))
}
empty_set()
str(empty_set())
devtools::load_all(".")
expect_equal(lat$m, empty_set())
S = c(7,10)
lat = nblat(j, S, Sig)
expect_equal(lat$m, empty_set())
expect_equal(lat$M, empty_set())
expect_equal(lat$M, as_set(c(7,10)))
devtools::load_all(".")
devtools::load_all(".")
# A = get_adj(pcg)
# Gam = rprec2(A)
# Sig = solve(Gam)
Sig
all_nodes = 1:nrow(Sig)
j <- 3
S_list = list(
all_nodes[-j],
c(2,6,12),
c(4,6,12,14),
c(7,10),
c(8,9,11,12,14))
for (S in S_list) {
print(computeLattice(j, S, Sig, all_nodes, should_sort=T))
cat('\n')
}
devtools::load_all(".")
all_nodes = 1:nrow(Sig)
j <- 3
S_list = list(
all_nodes[-j],
c(2,6,12),
c(4,6,12,14),
c(7,10),
c(8,9,11,12,14))
for (S in S_list) {
print(computeLattice(j, S, Sig, all_nodes, should_sort=T))
cat('\n')
}
use_test("lattice")
computeLattice(j, S, Sig, all_nodes, should_sort=T)
Sig
S
computeLattice(j, S, Sig, all_nodes, should_sort=T)
source("~/Dropbox/projects/Neighborhood_Lattice/nblat/R/new_lattice.R", echo=TRUE)
devtools::load_all(".")
j <- 3
out <- computeFullLatticeDecomp(j, Sig, all_nodes, should_sort=F)
devtools::load_all(".")
out <- nblat_decomp(j, Sig, all_nodes, should_sort=F)
out <- nblat_decomp(j, Sig, should_sort=T)
lats <- out$lats
(PO_count <- out$PO_count)
(set_counts <- table(unlist(lapply(lats, function(lat) lat$num_elms))))
